'''
[설명]
- 두 개의 문자열 A와 B가 주어졌을 때, 문자열 A를 편집하여 문자열 B로 만들고자 한다.
- 문자열 A를 편집할 때는 다음의 세 연산 중에서 한 번에 하나씩 선택하여 이용할 수 있다.
    - 삽입(Insert) : 특정한 위치에 하나의 문자를 삽입한다.
    - 삭제(Remove) : 특정한 위치에 있는 하나의 문자를 삭제한다.
    - 교체(Replace) : 특정한 위치에 있는 하나의 문자를 다른 문자로 교체한다.
- 편집 거리란, 문자열 A를 편집하여 문자열 B로 만들기 위해 사용한 연산의 수를 의미한다.
- 이때, 최소 편집 거리를 계산하여 출력하라.

[아이디어]
- 편집 거리 알고리즘

[점화식]
- dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1
    -> 문자열 A의 i번째 문자에서 문자열 B의 j번째 문자로 만들기 위해 필요한 최소 편집 거리

-> ✅ 다시풀기

편집 거리 알고리즘 정리하면 좋을 것 같음.
'''

import sys

# 최소 편집 거리 알고리즘 - DP
def edit_dist(a, b):
    n = len(a)
    m = len(b)
    
    # DP 테이블 초기화
    dp = [[0] * (m + 1) for _ in range(n + 1)]

    # DP 테이블 초기 설정
    for i in range(1, n + 1):
        dp[i][0] = i

    for j in range(1, m + 1):
        dp[0][j] = j

    # 최소 편집 거리 계산
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            
            # 문자가 같다면, 왼쪽 위에 해당하는 수를 그대로 대입
            if a[i - 1] == b[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
                
            # 문자가 다르다면, 3가지 경우 중에서 최솟값을 대입
            # 삽입(왼쪽), 삭제(위쪽), 교체(왼쪽 위) 중에서 최소 비용을 찾는다.
            else:
                dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1
                
    return dp[n][m]
    
a = input()
b = input()

ret = edit_dist(a, b)

print(ret)
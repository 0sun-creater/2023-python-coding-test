'''
[설명]
- N명의 병사가 무작위로 나열되어 있다. 
- 전투력이 높은 병사가 앞쪽에 오도록 내림차순으로 배치하고자 한다.
- 즉, 앞쪽에 있는 병사의 전투력이 항상 뒤쪽에 있는 병사보다 높아야 한다.
- 배치 과정에서는 특정한 위치에 있는 병사를 열외시키는 방법을 이용한다.
- 그러면서도, 남아있는 병사의 수가 최대가 되도록 할 때 열외시켜야 하는 병사의 수를 출력하라.

[아이디어]
- 최장 감소 부분 수열(LDS) 문제이다.
- 특정한 위치에 있는 병사를 현재 병사라고 가정하면, 현재 병사보다 앞쪽에 있는 병사들을 탐색하면서
    현재 병사의 전투력이 앞쪽에 있는 병사의 전투력보다 낮은지 판단한다.
- 만약, 전투력이 낮다면 부분 수열의 길이를 1 증가시킨다.
- 이때, 현재 병사보다 전투력이 높은 병사가 여러명일 경우, 현재 병사의 부분 수열의 길이는 가장 긴 부분 수열의 길이 + 1이다.

[점화식]
- dp[i] = max(dp[i], dp[j] + 1)
    -> i번째 병사에서 끝나는 최장 감소 부분 수열의 길이
    -> 단, j < i 이고 i번째 병사의 전투력이 j번째 병사의 전투력보다 낮아야 한다.

LDS, LIS 개념 정리하면 좋을 것 같다.
'''

import sys

n = int(input())
soldiers = list(map(int, input().split()))

# DP 테이블 초기화
dp = [1] * n

# 최장 감소 부분 수열
for i in range(1, n): # 인덱스 1 부터 시작한다.
    for j in range(0, i): # 앞쪽 병사 탐색
        if soldiers[i] < soldiers[j]: # 앞쪽에 있는 병사보다 전투력이 낮은 경우에만
            dp[i] = max(dp[i], dp[j] + 1) 
        
print(len(dp) - max(dp))
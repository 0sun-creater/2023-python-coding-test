'''
[문제]
- 0부터 N까지의 정수 K개를 더해서 그 합이 N이 되는 경우의 수를 구하라.
- 덧셈의 순서가 바뀌면 다른 경우로 취급한다.(1 + 2와 2 + 1은 다른 경우)
- 또한, 한 개의 수를 여러 번 쓸 수도 있다.

[점화식]
- dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
    -> 0부터 i까지의 정수 j개를 더해서 그 합이 i가 되는 경우의 수
- n = 5, k = 2
    - 0 + 5를 1개로 구성하기
    - 1 + 4를 1개로 구성하기
    - 2 + 3을 1개로 구성하기
    - 3 + 2를 1개로 구성하기
    - 4 + 1을 1개로 구성하기
    - 5 + 0을 1개로 구성하기
        => dp[n][k] = dp[0][k - 1] + dp[1][k - 1] + ... + dp[n - 1][k - 1] + dp[n][k - 1]
        => dp[n - 1][k] = dp[0][k - 1] + dp[1][k - 1] + ... + dp[n - 1][k - 1]
        
        ✅ 따라서, dp[n][k] = dp[n - 1][k] + dp[n][k - 1]

-> ✅ 다시 풀기
'''

n, k = map(int, input().split())

MOD = 1_000_000_000

# k = 1인 경우
# 자기 자신을 합으로 가지므로, 무조건 1
if k == 1:
    print(1)
else:
    # dp[i][j] = i까지의 정수 j개를 더해서 그 합이 i가 되는 경우의 수    
    dp = [[0] * (k + 1) for _ in range(n + 1)]
    dp[0][0] = 1

    # 점화식
    for i in range(n + 1):
        for j in range(1, k + 1):
            dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % MOD
                
    print(dp[n][k])
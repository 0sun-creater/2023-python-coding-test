'''
[설명]
- 바닥의 크기 : 가로 N, 세로 2
- 덮개의 종류 : 1 * 2 덮개, 2 * 1 덮개, 2 * 2 덮개
- 위의 덮개로 2 * N 크기의 바닥을 채우는 모든 경우의 수를 796,796으로 나눈 나머지를 출력한다.

[아이디어]
- 덮개의 종류는 3가지이다.
- 가로가 2인 바닥은,
    - 가로가 0일 때에 1 * 2, 2 * 2 덮개를 추가한다.
    - 가로가 1일 때에 2 * 1 덮개를 추가한다.
- 가로가 3인 바닥은,
    - 가로가 1일 때에 1 * 2, 2 * 2 덮개를 추가한다.
    - 가로가 2일 때에 2 * 1 덮개를 추가한다.
    
-> 즉, 현재 가로가 x라면, (x - 1일 때 경우의 수 * 2) + (x - 2일 때 경우의 수 * 1) 를 하면 된다.
-> x - i(i >= 3)을 고려하지 않는 이유는, 가지고 있는 덮개의 가로의 크기가 최대 2이기 때문이다.

[점화식]
- dp[i] = dp[i - 2] * 2 + dp[i - 1] * 1
    -> i - 2까지 채워져 있는 바닥에 1 * 2, 2 * 2 덮개를 채우는 방법 + i - 1까지 채워져 있는 바닥에 2 * 1 덮개를 채우는 방법
'''

import sys

n = int(input())


dp = [0] * (n + 1) # 가로가 i일 때 바닥을 채우는 경우의 수

dp[0], dp[1] = 1, 1 

# Bottom-Up
for i in range(2, n + 1):
    dp[i] = (dp[i - 2] * 2 + dp[i - 1] * 1) % 796796

print(dp[n])


"""
파일을 합치는 데 필요한 총 비용
< 조건 >
1. 연속적인 파일만 합칠 수 있다
2. 비용 : 두 파일 크기의 합
3. 최소비용
"""
"""
[예]
c1, c2, c3, c4
40, 30, 30, 50
< 방법 1 >
1) x1 : c2+c3 >> 30+30 = 60
2) x2 : c1+x1 >> 40+60 = 100
3) x3 : x1+c4 >> 100+50 = 150
>> 60 + 100 + 150 = 310
>> c2+c3 + c1+c2+c3 + c1+c2+c3+c4
>> c1*2 + c2*3 + c3*3 + c4*1
< 방법 2 >
1) y1 : c1+c2 >> 40+30 = 70
2) y2 : c3+c4 >> 30+50 = 80
3) y3 : y1+y2 >> 70+80 = 150
>> 70 + 80 + 150 = 300
>> c1+c2 + c3+c4 + c1+c2+c3+c4
>> c1*2 + c2*2 + c3*2 + c4*2
"""
"""
< 점화식 >
큰 문제 : 하나의 파일을 연속된 것끼리 두 개씩 합쳐서 하나의 파일을 만든다
작은 문제 : 묶음 파일을 연속된 것 끼리 두 개씩 합쳐서 더 큰 묶음 파일을 만든다

파일을 묶을 떄마다 묶음의 개수
1 > 2 > 4 > 8 > ...
2의 지수 까지 자른다 > 
"""
"""
만약 8개가 있으면 >> 7번
12 34 56 78 : 4번
1234 5678 : 2번
12345678 : 1번

만약 9개가 있으면 >> 8번
12 34 56 78 9 : 4번
1234 5678 9 : 2번
12345678 9 : 1번
123456789 : 1번

만약 10개가 있으면 >> 10번
12 34 56 78 910 : 5번
1234 5678 910 : 3번
12345678 910 : 1번
1234567890 : 1번

만약 11개가 있으면 >>
12 34 56 78 9 10 11 : 4번
1234 5678 9 10 11 : 2번
12345678 9 10 11 : 1번
12345678 910 11 : 1
1234567891011 : 2번

만약 15개가 있으면 >>
1. 8개
12 34 56 78: 4번
1234 5678 : 2번
12345678 : 1번
2. 4개
910 1112 : 2반
9101112 : 1번
3. 2개
1314 : 1번
"""
from bisect import bisect_right

t = int(input())    # 테스트 케이스 수
k = int(input())    # 소설을 구성하는 장의 수
files = list(map(int,input().split())) # 소설을 구성하는 파일들의 크기

two = [1,2,4,8,16,32,64,128,256]
file_num = k
cost=0
while file_num:
    idx = bisect_right(file_num)-1
    cost += sum(files[:2**idx])*idx
    files = files[2**idx:]
    file_num = len(files)

"""

위 - 흰색 / 아래 - 노란색
앞 - 빨강 / 뒷 - 오렌지
왼 - 초록 / 오른 - 파랑

- 명령대로 돌린 뒤 가장 윗면의 색상 구하기

1. 입력 받기
    - 테스트 케이스 T
    - 큐브 돌린 횟수 N 
    - 큐브 돌린 방법 (해당 면을 기준으로 + 시계, - 반시계)
2. 큐브 만들기
    U F L B R D 순서로
3. 큐브 돌리기 (시계 방향 기준)
    - U : F -> L -> B -> R -> F 순으로 1행 교체
    - D : F -> L -> B -> R -> F 순으로 3행 교체
    - F : U (3행) -> R(1열) -> D(3행) -> L(3열) -> U(3행) 순으로 교체 
    - B : U (1행) -> L(1열) -> D(1행) -> R(3열) -> U(1행) 순으로 교체
    - L : U (1열) -> F(1열) -> D(1열) -> B(3열) -> U(1열) 순으로 교체
    - R : U (3열) -> B(1얄) -> D(3얄) -> F(3열) -> U(3열) 순으로 교체
"""


rotate_info = {
    'U' : ([1, 2, 3, 4], [(0, 1, 2), (0, 1, 2), (0, 1, 2), (0, 1, 2)]),
    'D' : ([1, 2, 3, 4], [(6, 7, 8), (6, 7, 8), (6, 7, 8), (6, 7, 8)]),
    'F' : ([0, 4, 5, 2], [(6, 7, 8), (0, 3, 6), (6, 7, 8), (2, 5, 8)]),
    'B' : ([0, 2, 5, 4], [(0, 1, 2), (0, 3, 6), (0, 1, 2), (2, 5, 8)]),
    'L' : ([0, 1, 5, 3], [(0, 3, 6), (0, 3, 6), (0, 3, 6), (2, 5, 8)]),
    'R' : ([0, 3, 5, 1], [(2, 5, 8), (0, 3, 6), (2, 5, 8), (2, 5, 8)])
}


# 1. 입력 받기
T = int(input())    # 테스트 케이스 개수

for _ in range(T):
    N = int(input())    #  큐브 돌린 횟수
    orders = list(input().split())    # 큐브 돌린 방법

    # 2. 큐브 만들기
    cube = [ [i for _ in range(9)] for i in range(7)]


    # 3. 큐브 돌리기
    for order in orders:
        seq, where = rotate_info[order[0]]        # 어떤 순서로, 어디를 돌려야 하는지 정보
        if order[1] == '+' :    # 회전 방향 뒤집기
            seq.reverse()
            where.reverse()
        
        cube[-1] = cube[seq[0]]
        seq.append(-1)
        where.append(where[0])
        
        for i in range(4):
            a, b = seq[i], seq[i+1]
            x, y = where[i], where[i+1]
            cube[a][x[0]], cube[a][x[1]], cube[a][x[2]] = cube[b][y[0]], cube[b][y[1]], cube[b][y[2]]


    # 4. 출력
    color = ['w', 'r', 'g', 'o', 'b', 'y']
    for i in range(3):
        for j in range(i*3, i*3+3):
            print( color[cube[0][j]], end="")
        print("")
